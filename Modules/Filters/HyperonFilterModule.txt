#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

#include "ubana/HyperonProduction/Modules/SubModules/GeneratorAnalyser.h"

namespace hyperon 
{
   class HyperonFilter;
}

class hyperon::HyperonFilter : public art::EDFilter 
{
   public:
      explicit HyperonFilter(fhicl::ParameterSet const& p);

      HyperonFilter(HyperonFilter const&) = delete;
      HyperonFilter(HyperonFilter&&) = delete;
      HyperonFilter& operator=(HyperonFilter const&) = delete;
      HyperonFilter& operator=(HyperonFilter&&) = delete;

      bool filter(art::Event& e) override;

   private:

      fhicl::ParameterSet f_Generator;
};


hyperon::HyperonFilter::HyperonFilter(fhicl::ParameterSet const& p)
   : EDFilter{p},
   f_Generator(p.get<fhicl::ParameterSet>("Generator"))
{}

bool hyperon::HyperonFilter::filter(art::Event& e)
{
      GeneratorAnalyser* Generator_SM = new GeneratorAnalyser(e, f_Generator);
      GeneratorTruth GenT = Generator_SM->GetGeneratorTruth();

      bool pass = GenT.eventHasHyperon;       

      delete Generator_SM;
  
      return pass;
}

DEFINE_ART_MODULE(hyperon::HyperonFilter)